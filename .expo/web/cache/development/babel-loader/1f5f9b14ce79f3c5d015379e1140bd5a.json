{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport function assertSensorEventEnabledAsync(eventName, timeout) {\n  var isEnabled;\n  return _regeneratorRuntime.async(function assertSensorEventEnabledAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(isSensorEnabledAsync(eventName, timeout));\n\n        case 2:\n          isEnabled = _context.sent;\n\n          if (!isEnabled) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 5:\n          throw new Error(\"Cannot observe event: \" + eventName + \".\" + '\\nEnable device orientation in Settings > Safari > Motion & Orientation Access' + '\\nalso ensure that you are hosting with https as DeviceMotion is now a secure API on iOS Safari.');\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isSensorEnabledAsync(eventName) {\n  var timeout,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function isSensorEnabledAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          timeout = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 250;\n\n          if (isIOS()) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", true);\n\n        case 3:\n          return _context2.abrupt(\"return\", new Promise(function (resolve) {\n            var id = setTimeout(function () {\n              window.removeEventListener(eventName, listener);\n              resolve(false);\n            }, timeout);\n\n            var listener = function listener() {\n              clearTimeout(id);\n              window.removeEventListener(eventName, listener);\n              resolve(true);\n            };\n\n            window.addEventListener(eventName, listener);\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isIOS() {\n  var isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  var isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}","map":{"version":3,"sources":["../../src/utils/isSensorEnabledAsync.web.ts"],"names":[],"mappings":";AAIA,OAAO,SAAe,6BAAf,CACL,SADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAImB,oBAAoB,CAAC,SAAD,EAAY,OAAZ,CAJvC;;AAAA;AAIC,UAAA,SAJD;;AAAA,eAKD,SALC;AAAA;AAAA;AAAA;;AAAA,2CAMI,IANJ;;AAAA;AAAA,gBASC,IAAI,KAAJ,CACJ,2BAAyB,SAAzB,SACE,gFADF,GAEE,kGAHE,CATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAe,oBAAf,CACL,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeL,UAAA,OAfK,8DAea,GAfb;;AAAA,cAiBA,KAAK,EAjBL;AAAA;AAAA;AAAA;;AAAA,4CAkBI,IAlBJ;;AAAA;AAAA,4CAqBE,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAG;AAC3B,gBAAM,EAAE,GAAG,UAAU,CAAC,YAAK;AACzB,cAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC;AACA,cAAA,OAAO,CAAC,KAAD,CAAP;AACD,aAHoB,EAGlB,OAHkB,CAArB;;AAKA,gBAAM,QAAQ,GAAG,SAAX,QAAW,GAAW;AAC1B,cAAA,YAAY,CAAC,EAAD,CAAZ;AACA,cAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,QAAtC;AACA,cAAA,OAAO,CAAC,IAAD,CAAP;AACD,aAJD;;AAMA,YAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,QAAnC;AACD,WAbM,CArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsCP,SAAS,KAAT,GAAc;AACZ,MAAM,OAAO,GAAG,sBAAsB,IAAtB,CAA2B,SAAS,CAAC,SAArC,CAAhB;AACA,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,UAAD,CAAvB;AACA,SAAO,OAAO,IAAI,CAAC,MAAnB;AACD","sourcesContent":["type SensorEventName = 'deviceorientation' | 'devicemotion';\n\n// iOS 12.2 disables DeviceMotion by default now\n// https://github.com/w3c/deviceorientation/issues/57\nexport async function assertSensorEventEnabledAsync(\n  eventName: SensorEventName,\n  timeout?: number\n): Promise<boolean> {\n  const isEnabled = await isSensorEnabledAsync(eventName, timeout);\n  if (isEnabled) {\n    return true;\n  }\n\n  throw new Error(\n    `Cannot observe event: ${eventName}.` +\n      '\\nEnable device orientation in Settings > Safari > Motion & Orientation Access' +\n      '\\nalso ensure that you are hosting with https as DeviceMotion is now a secure API on iOS Safari.'\n  );\n}\n\n// throw error if the sensor is disabled.\nexport async function isSensorEnabledAsync(\n  eventName: SensorEventName,\n  // Initial interval tests found results on a median of\n  // devicemotion:\n  // - iPhone 7 Plus: 166.6666753590107ms\n  // - iPhone X: 166.6666753590107ms\n  // deviceorientation:\n  // -\n  //\n  // The initial launch of iOS Safari onto a page calling this API seems to take a little longer than a regular call.\n  // devicemotion:\n  // - ~35ms\n  // deviceorientation:\n  // - ~45ms\n  //\n  timeout: number = 250\n): Promise<boolean> {\n  if (!isIOS()) {\n    return true;\n  }\n\n  return new Promise(resolve => {\n    const id = setTimeout(() => {\n      window.removeEventListener(eventName, listener);\n      resolve(false);\n    }, timeout);\n\n    const listener = (): void => {\n      clearTimeout(id);\n      window.removeEventListener(eventName, listener);\n      resolve(true);\n    };\n\n    window.addEventListener(eventName, listener);\n  });\n}\n\n// https://stackoverflow.com/a/9039885/4047926\nfunction isIOS(): boolean {\n  const isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  const isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
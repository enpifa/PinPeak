{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { isSensorEnabledAsync } from \"./utils/isSensorEnabledAsync.web\";\nvar eventName = 'devicemotion';\nexport default {\n  get name() {\n    return 'ExponentDeviceMotion';\n  },\n\n  get Gravity() {\n    return 9.81;\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof DeviceMotionEvent === 'undefined')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(isSensorEnabledAsync(eventName));\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  _handleMotion: function _handleMotion(motion) {\n    SyntheticPlatformEmitter.emit('deviceMotionDidUpdate', {\n      acceleration: motion.acceleration,\n      accelerationIncludingGravity: motion.accelerationIncludingGravity,\n      interval: motion.interval,\n      rotationRate: motion.rotationRate,\n      orientation: window.orientation\n    });\n  },\n  startObserving: function startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving: function stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  }\n};","map":{"version":3,"sources":["../src/ExponentDeviceMotion.web.ts"],"names":[],"mappings":";AAAA,SAAS,wBAAT,QAAyC,kBAAzC;AAEA,SAAS,oBAAT;AAEA,IAAM,SAAS,GAAG,cAAlB;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,sBAAP;AACD,GAHY;;AAIb,MAAI,OAAJ,GAAW;AACT,WAAO,IAAP;AACD,GANY;;AAOP,EAAA,gBAPO;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQP,OAAO,iBAAP,KAA6B,WARtB;AAAA;AAAA;AAAA;;AAAA,6CASF,KATE;;AAAA;AAAA;AAAA,6CAWE,oBAAoB,CAAC,SAAD,CAXtB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAab,EAAA,aAba,yBAaC,MAbD,EAaO;AAElB,IAAA,wBAAwB,CAAC,IAAzB,CAA8B,uBAA9B,EAAuD;AACrD,MAAA,YAAY,EAAE,MAAM,CAAC,YADgC;AAErD,MAAA,4BAA4B,EAAE,MAAM,CAAC,4BAFgB;AAGrD,MAAA,QAAQ,EAAE,MAAM,CAAC,QAHoC;AAIrD,MAAA,YAAY,EAAE,MAAM,CAAC,YAJgC;AAKrD,MAAA,WAAW,EAAE,MAAM,CAAC;AALiC,KAAvD;AAOD,GAtBY;AAuBb,EAAA,cAvBa,4BAuBC;AACZ,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK,aAAxC;AACD,GAzBY;AA0Bb,EAAA,aA1Ba,2BA0BA;AACX,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,KAAK,aAA3C;AACD;AA5BY,CAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { isSensorEnabledAsync } from './utils/isSensorEnabledAsync.web';\n\nconst eventName = 'devicemotion';\n\nexport default {\n  get name(): string {\n    return 'ExponentDeviceMotion';\n  },\n  get Gravity(): number {\n    return 9.81;\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof DeviceMotionEvent === 'undefined') {\n      return false;\n    }\n    return await isSensorEnabledAsync(eventName);\n  },\n  _handleMotion(motion) {\n    // TODO: Bacon: Can rotation be calculated?\n    SyntheticPlatformEmitter.emit('deviceMotionDidUpdate', {\n      acceleration: motion.acceleration,\n      accelerationIncludingGravity: motion.accelerationIncludingGravity,\n      interval: motion.interval,\n      rotationRate: motion.rotationRate,\n      orientation: window.orientation,\n    });\n  },\n  startObserving() {\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}